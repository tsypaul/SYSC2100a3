package StackReferenceBased;

import java.util.Scanner;

public class Infix2PostfixConverter {
	
	private static boolean isOperator(char c){
        return (c == '+' || c == '-' || c == '*' || c == '/' || c == '(' || c == ')');
    }

    private static boolean isLowerPrecedence(char op1, char op2){
        switch (op1){
            case '+':
            case '-':
                return !(op2 == '+' || op2 == '-');
            case '*':
            case '/':
                return op2 == '(';
            case '(':
                return true;
            default:
                return false;
        }
    }
    
	
    public static String InToPost(String infixString) {
        String postfixString = " ";
        StackReferenceBased s = new StackReferenceBased();
        for (int index = 0; index < infixString.length(); ++index) {
            char chValue = infixString.charAt(index);
            if (chValue == '(') {
                s.push('(');
            } else if (chValue == ')') {
                Character oper = s.peek();
                while (!(oper.equals('(')) && !(s.isEmpty())) {
                    postfixString += oper.charValue();
                    s.pop();
                    oper = s.peek();
                }
                s.pop();
            } else if (chValue == '+' || chValue == '-') {
                //Stack is empty
                if (s.isEmpty()) {
                    s.push(chValue);
                    //current Stack is not empty
                } else {
                    Character oper = s.peek();
                    while (!(s.isEmpty() || oper.equals(new Character('(')) || oper.equals(new Character(')')))) {
                        s.pop();
                        postfixString += oper.charValue();
                    }
                    s.push(chValue);
                }
            } else if (chValue == '*' || chValue == '/') {
                if (s.isEmpty()) {
                    s.push(chValue);
                } else {
                    Character oper = s.peek();
                    while (!oper.equals(new Character('+')) && !oper.equals(new Character('-')) && !s.isEmpty()) {
                        s.pop();
                        postfixString += oper.charValue();
                    }
                    s.push(chValue);
                }
            } else {
                postfixString += chValue;
            }
        }
        while (!s.isEmpty()) {
            Character oper = s.peek();
            if (!oper.equals(new Character('('))) {
                s.pop();
                postfixString += oper.charValue();
            }
        }
        return postfixString;
    }
	
	public static void main(String[] arg){
		System.out.println("Please enter a infix: ");
		Scanner S = new Scanner(System.in);
		String infix = S.nextLine();
		S.close();
//		Object[] in = new Object [infix.length()];
//		for (int i = 0; i < infix.length(); i++){
//			in[i] = infix.charAt(i);
//		}
		System.out.println("infix: " + infix);
		System.out.println("postfix: " + InToPost(infix));
		
	}
}
