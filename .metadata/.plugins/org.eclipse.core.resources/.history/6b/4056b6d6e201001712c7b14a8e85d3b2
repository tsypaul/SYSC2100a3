package StackReferenceBased;

import java.util.Scanner;

public class Infix2PostfixConverter {
	
	public static String InToPost(String infixString) {
		
		StackReferenceBased s = new StackReferenceBased();
        String postfixString = " ";

        for (int index = 0; index < infixString.length(); ++index) {
            char chValue = infixString.charAt(index);
            if (chValue == '(') {
                s.push('(');
            } else if (chValue == ')') {
                Object oper = s.peek();
                while (!(oper.equals('(')) && !(s.isEmpty())) {
                    postfixString += oper.toString();
                    s.pop();
                    oper = s.peek();
                }
                s.pop();
            } else if (chValue == '+' || chValue == '-') {
                //Stack is empty
                if (s.isEmpty()) {
                    s.push(chValue);
                    //current Stack is not empty
                } else {
                    Object oper = s.peek();
                    while (!(s.isEmpty() || oper.equals(new Character('(')) || oper.equals(new Character(')')))) {
                        s.pop();
                        postfixString += oper.toString();
                    }
                    s.push(chValue);
                }
            } else if (chValue == '*' || chValue == '/') {
                if (s.isEmpty()) {
                    s.push(chValue);
                } else {
                    Object oper = s.peek();
                    while (!oper.equals(new Character('+')) && !oper.equals(new Character('-')) && !s.isEmpty()) {
                        s.pop();
                        postfixString += oper.toString();
                    }
                    s.push(chValue);
                }
            } else {
                postfixString += chValue;
            }
        }
        while (!s.isEmpty()) {
            Object oper = s.peek();
            if (!oper.equals(new Character('('))) {
                s.pop();
                postfixString += oper.toString();
            }
        }
        return postfixString;
    }
	
	public static Object[] convertInfixToPostfix(Object[] o){
		Object[] postFix = new Object [o.length];
		StackReferenceBased s = new StackReferenceBased();
		for (int i = 0; i < o.length; i++){
			Object x = o[i];
			if(x == "("){
				s.push(x);
			}else if(x == ")"){
				Object stackTop = s.peek();
				while(stackTop != "(" && !s.isEmpty()){
					postFix[i] = stackTop;
					stackTop = s.pop();
				}
			}else if(x == "+" || x == "-"){
				if(s.isEmpty()){
					s.push(x);
				}else{
					Object a = s.peek();
					while(!s.isEmpty() || a.equals("(") || a.equals(")")){
						postFix[i] = s.pop();
					}
				}
			}else if(x == "*" || x == "/"){
				if(s.isEmpty()){
					s.push(x);
				}else{
					Object a = s.peek();
					while(!s.isEmpty() || !a.equals("+") || !a.equals("-")){
						postFix[i] = s.pop();
					}
				}
			}else{
				postFix[i] = x;
			}
		}
		while(!s.isEmpty()){
			Object a = s.peek();
			if(!a.equals("(")){
				s.pop();
				postFix[o.length] = a;
			}
		}
		return postFix;
	}
	
	public static void main(String[] arg){
		System.out.println("Please enter a infix: ");
		Scanner S = new Scanner(System.in);
		String infix = S.nextLine();
		S.close();
		Object[] in = new Object [infix.length()];
		for (int i = 0; i < infix.length(); i++){
			in[i] = infix.charAt(i);
		}
		
		System.out.println("infix: " + infix);
		System.out.println("postfix: " + InToPost(infix));
		
	}
}
